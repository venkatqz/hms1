// Generated by view binder compiler. Do not edit!
package com.example.hms1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.hms1.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityWorkerSignupBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton btnAddWorker;

  @NonNull
  public final TextInputEditText etBlock;

  @NonNull
  public final TextInputEditText etCategory;

  @NonNull
  public final TextInputEditText etName;

  @NonNull
  public final TextInputEditText etPassword;

  @NonNull
  public final TextInputEditText etWorkerId;

  @NonNull
  public final AutoCompleteTextView spinnerWorkerType;

  @NonNull
  public final TextInputLayout tilBlock;

  @NonNull
  public final TextInputLayout tilCategory;

  @NonNull
  public final TextInputLayout tilName;

  @NonNull
  public final TextInputLayout tilPassword;

  @NonNull
  public final TextInputLayout tilWorkerId;

  @NonNull
  public final TextInputLayout tilWorkerType;

  private ActivityWorkerSignupBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton btnAddWorker, @NonNull TextInputEditText etBlock,
      @NonNull TextInputEditText etCategory, @NonNull TextInputEditText etName,
      @NonNull TextInputEditText etPassword, @NonNull TextInputEditText etWorkerId,
      @NonNull AutoCompleteTextView spinnerWorkerType, @NonNull TextInputLayout tilBlock,
      @NonNull TextInputLayout tilCategory, @NonNull TextInputLayout tilName,
      @NonNull TextInputLayout tilPassword, @NonNull TextInputLayout tilWorkerId,
      @NonNull TextInputLayout tilWorkerType) {
    this.rootView = rootView;
    this.btnAddWorker = btnAddWorker;
    this.etBlock = etBlock;
    this.etCategory = etCategory;
    this.etName = etName;
    this.etPassword = etPassword;
    this.etWorkerId = etWorkerId;
    this.spinnerWorkerType = spinnerWorkerType;
    this.tilBlock = tilBlock;
    this.tilCategory = tilCategory;
    this.tilName = tilName;
    this.tilPassword = tilPassword;
    this.tilWorkerId = tilWorkerId;
    this.tilWorkerType = tilWorkerType;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityWorkerSignupBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityWorkerSignupBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_worker_signup, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityWorkerSignupBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAddWorker;
      MaterialButton btnAddWorker = ViewBindings.findChildViewById(rootView, id);
      if (btnAddWorker == null) {
        break missingId;
      }

      id = R.id.etBlock;
      TextInputEditText etBlock = ViewBindings.findChildViewById(rootView, id);
      if (etBlock == null) {
        break missingId;
      }

      id = R.id.etCategory;
      TextInputEditText etCategory = ViewBindings.findChildViewById(rootView, id);
      if (etCategory == null) {
        break missingId;
      }

      id = R.id.etName;
      TextInputEditText etName = ViewBindings.findChildViewById(rootView, id);
      if (etName == null) {
        break missingId;
      }

      id = R.id.etPassword;
      TextInputEditText etPassword = ViewBindings.findChildViewById(rootView, id);
      if (etPassword == null) {
        break missingId;
      }

      id = R.id.etWorkerId;
      TextInputEditText etWorkerId = ViewBindings.findChildViewById(rootView, id);
      if (etWorkerId == null) {
        break missingId;
      }

      id = R.id.spinnerWorkerType;
      AutoCompleteTextView spinnerWorkerType = ViewBindings.findChildViewById(rootView, id);
      if (spinnerWorkerType == null) {
        break missingId;
      }

      id = R.id.tilBlock;
      TextInputLayout tilBlock = ViewBindings.findChildViewById(rootView, id);
      if (tilBlock == null) {
        break missingId;
      }

      id = R.id.tilCategory;
      TextInputLayout tilCategory = ViewBindings.findChildViewById(rootView, id);
      if (tilCategory == null) {
        break missingId;
      }

      id = R.id.tilName;
      TextInputLayout tilName = ViewBindings.findChildViewById(rootView, id);
      if (tilName == null) {
        break missingId;
      }

      id = R.id.tilPassword;
      TextInputLayout tilPassword = ViewBindings.findChildViewById(rootView, id);
      if (tilPassword == null) {
        break missingId;
      }

      id = R.id.tilWorkerId;
      TextInputLayout tilWorkerId = ViewBindings.findChildViewById(rootView, id);
      if (tilWorkerId == null) {
        break missingId;
      }

      id = R.id.tilWorkerType;
      TextInputLayout tilWorkerType = ViewBindings.findChildViewById(rootView, id);
      if (tilWorkerType == null) {
        break missingId;
      }

      return new ActivityWorkerSignupBinding((LinearLayout) rootView, btnAddWorker, etBlock,
          etCategory, etName, etPassword, etWorkerId, spinnerWorkerType, tilBlock, tilCategory,
          tilName, tilPassword, tilWorkerId, tilWorkerType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
